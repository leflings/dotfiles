#!/usr/bin/env python

# Continuously builds a latex document, refreshing it only when it has changed.

# What makes this different from latexmk, is that it just continually builds in
# the background, and refreshes to the latest copy _after each build_. This
# means you get to see the latest copy, even if there are 3 or 4 iterations
# left to go to make it perfect.

# However, it won't just constantly rebuild while there are no changes.

# It does _not_ attempt to do an error parser. rubber-info does that
# spectacularly. However, it will copy the log file, so that its not constantly
# changing, and only update it to the latest.

import subprocess
import shutil
import time
import os
import sys
import hashlib

def get_input_files(base):
	try:
		lines = open(base + ".fls", "r").readlines ()
	except Exception:
		# If the file doesnt exist, it'll be fixed later, when they see an empty list, and run it again.
		debug (".fls file missing")
		return []

	result = set()
	for line in lines:
		(before, _, after) = line.rstrip().partition (" ")
		if before == "INPUT" and after[0] != "/":
			result.add (after)

	return result

def debug (message):
	global logfileobject
	print >>logfileobject, time.strftime("%H:%M:%S") + " - " + message

def msg (message):
	debug (message)
	print str(time.strftime("%H:%M:%S")) + " - " + message


filename = sys.argv[1]
base = os.path.splitext (os.path.basename (filename))[0]
final = base + ".pdf"
logfile = base + ".log"
auxfile = base + ".aux"

texbuildlogfile = "texbuild.log"

latex = ["pdflatex", "-recorder", "-interaction=nonstopmode", filename]
bibtex = ["bibtex", base]


# Start the logfile again
if os.path.exists(texbuildlogfile):
	os.remove (texbuildlogfile)

logfileobject = open (texbuildlogfile, "w")




timestamps = {}
md5s = {}


while (True):

	files = get_input_files (base)

	# No .fls file
	if len (files) == 0:
		files = [filename]


	# Keep checking the files until a timestamp changes
	build = False
	while build == False:

		time.sleep (0.2)
		new_timestamps = []
		changed_files = []
		for f in files:

			# First check the timestamp
			try:
				t = os.path.getmtime(f)
			except Exception:
				debug ("Time stamp error, always build")
				build = True
			else:
				if t > timestamps.get (f, 0):
					new_timestamps.append (f)
					timestamps[f] = t

					# Check if it has actually changed
					m = hashlib.md5( open( f, "r" ).read()).hexdigest()
					if m != md5s.get (f, ""):
						changed_files.append (f)
						md5s[f] = m
						build = True


		if len (changed_files):
			msg ("Changed files: " + ", ".join (changed_files))
		elif len (new_timestamps):
			msg ("Touched files: " + ", ".join (new_timestamps))


		# If the .pdf if missing, build it
		if not os.path.exists(final):
			msg ("PDF missing")
			build = True



	# Now build it


	# We dont care about outputs or exit code
	msg ("Beginning build")
	subprocess.call (bibtex, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	p = subprocess.Popen (latex, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

	# This can hang. Don't wait longer than 20 seconds (when it takes longer,
	# its generally building something incredibly broken, possibly because it
	# saved just after an open brace was added, and it can't make sense of the
	# thing.
	start = time.time ()
	while True:
		retcode = p.poll()

		if retcode != None:
			break;

		# It might timeout
		finish = time.time ()
		if finish > start + 30:
			try:
				#p.terminate()
				p.kill()
			except Exception:
				pass

			debug ("Timeout (" + str(finish - start) + ") running: " + " ".join (latex))
			break

		time.sleep (0.2)

	msg ("Built");


	if os.path.exists(final):
		debug ("copying pdf")

		# Delete before copying for okular
		if os.path.exists("t.pdf"):
			os.remove ("t.pdf")
		shutil.copy (final, "t.pdf")

	debug ("copying log")
	shutil.copy (logfile, "t.log")
	shutil.copy (auxfile, "t.aux") # for bibtex


